# [stable|testing|upstream]/Containerfile
#
# Build a Podman container image from the latest
# stable version of Podman on the Fedoras Updates System.
# https://bodhi.fedoraproject.org/updates/?search=podman
# This image can be used to create a secured container
# that runs safely with privileges within the container.
#
# FLAVOR defaults to stable if unset
#
# FLAVOR=stable    acquires a stable version of Podman
#                   from the Fedoras Updates System.
# FLAVOR=testing   acquires a testing version of Podman
#                   from the Fedoras Updates System.
# FLAVOR=upstream  acquires a testing version of Podman
#                   from the Fedora Copr Buildsystem.
#                   https://copr.fedorainfracloud.org/coprs/rhcontainerbot/podman-next/
#
# https://bodhi.fedoraproject.org/updates/?search=podman

# Must be the latest -supported- Fedora release manifest-list
ARG BASE_IMAGE="registry.fedoraproject.org/fedora"
ARG BASE_TAG="39"

# Must run maintain_packages.sh following any changes to the two values below.
ARG INST_PKGS="podman fuse-overlayfs openssh openssh-clients"
# Nesting SELinux inside a container isn't supported by this image.
ARG EXCL_PKGS="container-selinux"

FROM ${BASE_IMAGE}:${BASE_TAG} as cache
ARG FLAVOR="stable"
ADD /*-packages.txt /var/cache/dnf/
RUN echo "FLAVOR is ${FLAVOR}" && \
    dnf -y makecache && \
    if [[ "${FLAVOR}" == "stable" ]]; then \
        dnf --assumeyes --nodocs install koji && \
        cd /var/cache/dnf && \
        grep -Ev '^($| +|#+)' ./$(uname -m)-packages.txt \
            | while read rpm_filename junk; do \
                 koji download-build --rpm $rpm_filename; \
            done \
    elif [[ "${FLAVOR}" != 'testing' ]] && [[ "${FLAVOR}" != 'upstream' ]]; then \
        echo "FLAVOR build-arg must be 'stable', 'testing', or 'upstream'" && \
        exit 1; \
    fi

FROM ${BASE_IMAGE}:${BASE_TAG} as final
ARG FLAVOR="stable"
# When building for multiple-architectures in parallel using emulation
# it's really easy for one/more dnf processes to timeout or mis-count
# the minimum download rates.  Bump both to be extremely forgiving of
# an overworked host.
RUN echo -e "\n\n# Added during image build" >> /etc/dnf/dnf.conf && \
    echo -e "minrate=100\ntimeout=60\n" >> /etc/dnf/dnf.conf

# Note: rpm --setcaps... needed due to Fedora (base) image builds
#       failing to record shadow-utils capabilties properly
#       on /usr/bin/new{u,g}idmap to `cap_set{u,g}id=ep`.
#       Verify with `rpm -V shadow-utils` (should be blank)
#       and `getcap <filename>` commands.
RUN --mount=type=bind,from=cache,src=/var/cache/dnf,dst=/var/cache/dnf,rw \
    dnf -y update && \
    rpm --setcaps shadow-utils 2>/dev/null && \
    declare -a excl_args && \
    for pkg in $EXCL_PKGS; do xcl_arg+=( --exclude=$pkg ); done && \
    case "${FLAVOR}" in \
      stable) \
          cd /var/cache/dnf && \
          rpm -ivh --excludedocs *.rpm && \
          cp ./$(uname -m)-packages.txt /root/ \
      ;; \
      testing) \
          dnf -y install $INST_PKGS "${excl_args[@]}"  \
              --enablerepo updates-testing \
      ;; \
      upstream) \
          dnf -y install 'dnf-command(copr)' --enablerepo=updates-testing && \
          dnf -y copr enable rhcontainerbot/podman-next && \
          dnf -y install $INST_PKGS "${excl_args[@]}" \
              --enablerepo=updates-testing \
      ;; \
      *) \
        printf "\\nFLAVOR argument must be set and valid, currently: '${FLAVOR}'\\n\\n" 1>&2 && \
        exit 1 \
      ;; \
    esac

RUN useradd podman; \
echo -e "podman:1:999\npodman:1001:64535" > /etc/subuid; \
echo -e "podman:1:999\npodman:1001:64535" > /etc/subgid;

ADD /containers.conf /etc/containers/containers.conf
ADD /podman-containers.conf /home/podman/.config/containers/containers.conf

RUN mkdir -p /home/podman/.local/share/containers && \
    chown podman:podman -R /home/podman && \
    chmod 644 /etc/containers/containers.conf

# Copy & modify the defaults to provide reference if runtime changes needed.
# Changes here are required for running with fuse-overlay storage inside container.
RUN sed -e 's|^#mount_program|mount_program|g' \
           -e '/additionalimage.*/a "/var/lib/shared",' \
           -e 's|^mountopt[[:space:]]*=.*$|mountopt = "nodev,fsync=0"|g' \
           /usr/share/containers/storage.conf \
           > /etc/containers/storage.conf

# Setup internal Podman to pass subscriptions down from host to internal container
RUN printf '/run/secrets/etc-pki-entitlement:/run/secrets/etc-pki-entitlement\n/run/secrets/rhsm:/run/secrets/rhsm\n' > /etc/containers/mounts.conf

# Note VOLUME options must always happen after the chown call above
# RUN commands can not modify existing volumes
VOLUME /var/lib/containers
VOLUME /home/podman/.local/share/containers

RUN mkdir -p /var/lib/shared/overlay-images \
             /var/lib/shared/overlay-layers \
             /var/lib/shared/vfs-images \
             /var/lib/shared/vfs-layers && \
    touch /var/lib/shared/overlay-images/images.lock && \
    touch /var/lib/shared/overlay-layers/layers.lock && \
    touch /var/lib/shared/vfs-images/images.lock && \
    touch /var/lib/shared/vfs-layers/layers.lock

ENV _CONTAINERS_USERNS_CONFIGURED="" \
    BUILDAH_ISOLATION=chroot
